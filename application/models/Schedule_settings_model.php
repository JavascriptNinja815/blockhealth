<?phpclass Schedule_settings_model extends CI_Model {    public function get_physician_weekdays_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $physician_data = $this->db->select("md5(id) as id, mon, tue, wed, thu, fri, sat, sun")                                    ->from("schedule_visit_settings")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))->get()->result();                    if ($physician_data) {                        return array(                            "result" => "success",                            "data" => $physician_data                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Schedule settings data not found"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function get_all_blocks_model() {        //to get weekblocks and dayblocks including start end time, for physician for perticular day,         //to show in add block popup        $this->form_validation->set_rules('id', 'Physician ID', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $date = $data["param"];                    $date_object = DateTime::createFromFormat("Y-m-d", $data["param"]);                    $weekday = substr(strtolower($date_object->format("l")), 0, 3);                    $day_block_data = $this->db->select("type, start_time, end_time")                                    ->from("clinic_physician_day_blocks")                                    ->where(array(                                        "for_date" => $date,                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))                                    ->where_in("type", array("timeblock", "dayblock"))                                    ->get()->result();                    $weekly_block_data = $this->db->select("start_time, end_time")                                    ->from("clinic_physician_weekly_blocks")                                    ->where(array(                                        "for_weekday" => $weekday,                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))                                    ->get()->result();                    $day_data = null;                    //find day data if specified earlier                    $day_data = $this->db->select("start_time, end_time")                                    ->from("clinic_physician_day_blocks")                                    ->where(array(                                        "for_date" => $date,                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))                                    ->where_in("type", array("daytime"))                                    ->get()->result();                    //if not then take day data from weekday                    if ($day_data) {                        //found a set timing in specification table                        $day_data = array(                            "timings" => $day_data[0],                            "type" => "customized"                        );                        $weekly_block_data = array();                    } else {                        //find day of week                        $day_date = DateTime::createFromFormat("Y-m-d", $data["param"]);                        $day_weekday = substr(strtolower($day_date->format("l")), 0, 3);                        //find start end time from schedule_visit_settings table                        $day_data = $this->db->select("{$day_weekday}_start_time as start_time, "                                                . "{$day_weekday}_end_time as end_time, "                                                . "{$day_weekday}")                                        ->from("schedule_visit_settings")                                        ->where(array(                                            "clinic_physician_id" => $physician_id,                                            "active" => 1                                        ))->get()->result();                        $day_data = array(                            "timings" => $day_data[0],                            "type" => "weekly"                        );                    }                    return array(                        "result" => "success",                        "data" => array(                            "day_block_data" => $day_block_data,                            "weekly_block_data" => $weekly_block_data,                            "day_data" => $day_data                        )                    );                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                //log_message("error", "Error at get_day_blocks_model : " . $ex->getMessage());                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function update_physician_weekdays_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $updated = $this->db->where(array(                                "clinic_physician_id" => $physician_id,                                "active" => 1                            ))->update("schedule_visit_settings", array(                        "mon" => ((isset($data["mon"])) ? "yes" : "no"),                        "tue" => ((isset($data["tue"])) ? "yes" : "no"),                        "wed" => ((isset($data["wed"])) ? "yes" : "no"),                        "thu" => ((isset($data["thu"])) ? "yes" : "no"),                        "fri" => ((isset($data["fri"])) ? "yes" : "no"),                        "sat" => ((isset($data["sat"])) ? "yes" : "no"),                        "sun" => ((isset($data["sun"])) ? "yes" : "no")                    ));                    if ($updated) {                        return array(                            "result" => "success"                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Physician schedule setting could not be updated"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function get_weekday_timing_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        $this->form_validation->set_rules('weekday', 'Weekday', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $day = $data["weekday"];                    $daytime_data = $this->db->select("{$day}_start_time as start_time, "                                            . "{$day}_end_time as end_time")                                    ->from("schedule_visit_settings")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))->get()->result();                    $weekly_blocks = $this->db->select("start_time, end_time")                                    ->from("clinic_physician_weekly_blocks")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "for_weekday" => $day,                                        "active" => 1                                    ))->get()->result();                    //log_message("error", "weekly blocks = " . $this->db->last_query());                    if ($daytime_data) {                        return array(                            "result" => "success",                            "data" => array(                                "daytime" => $daytime_data,                                "weekly_blocks" => $weekly_blocks                            )                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Schedule settings data not found"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function get_physician_blocks_model() {        //to set data in calender, we get blocks and customized timing if any for a day         //then set timing as per available timing         $this->form_validation->set_rules('id', 'Physician ID', 'required');        $this->form_validation->set_rules('target', 'Start Day', 'required');        $this->form_validation->set_rules('param', 'End Day', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $start_date = $data["target"];                $end_date = $data["param"];                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $day_blocks = $this->db->select("type, start_time, end_time, for_date")                                    ->from("clinic_physician_day_blocks")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "active" => 1,                                        "for_date >=" => $start_date,                                        "for_date <" => $end_date,                                        "type <>" => "daytime"                                    ))                                    ->order_by("for_date desc, start_time asc")                                    ->get()->result();                    //log_message("error", "day blocks => " . $this->db->last_query());                    //get weekly blocks                    $weekly_blocks = $this->db->select("start_time, end_time, for_weekday")                                    ->from("clinic_physician_weekly_blocks")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))                                    ->order_by("for_weekday desc, start_time asc")                                    ->get()->result();                    //log_message("error", "weekly  => " . $this->db->last_query());                    //check for specific day entries for start and end time                    $modified_datetime = $this->db->select("for_date, start_time, end_time")                                    ->from("clinic_physician_day_blocks")                                    ->where(array(                                        "active" => 1,                                        "for_date >= " => $start_date,                                        "for_date < " => $end_date,                                        "clinic_physician_id" => $physician_id,                                        "type" => "daytime"                                    ))                                    ->order_by("for_date desc, start_time asc")                                    ->get()->result();                    //log_message("error", "customized data for calendar = " . $this->db->last_query());                    return array(                        "result" => "success",                        "data" => array(                            "day_blocks" => $day_blocks,                            "weekly_blocks" => $weekly_blocks,                            "customized_data" => $modified_datetime                        )                    );                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function update_weekday_timing_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        $this->form_validation->set_rules('weekday', 'Weekday', 'required');        $this->form_validation->set_rules('start_time', 'Start Time', 'required');        $this->form_validation->set_rules('end_time', 'End Time', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $day = $data["weekday"];                    $day_start_time = $data["start_time"];                    $day_end_time = $data["end_time"];                    $block_start_times = isset($data["block_start_time"]) ?                            $data["block_start_time"] : array();                    $block_end_times = isset($data["block_end_time"]) ?                            $data["block_end_time"] : array();                    //remove exisiting blocks for weekday                     $this->db->where(array(                        "for_weekday" => $day,                        "clinic_physician_id" => $physician_id,                        "active" => 1                    ))->update("clinic_physician_weekly_blocks", array(                        "active" => 0                    ));                    //remove all dayblocks for that weekday                    $this->db->where(array(                        "active" => 1,                        "lower(substr(dayname(for_date), 1, 3)) = " => $day,                        "clinic_physician_id" => $physician_id                    ))->update("clinic_physician_day_blocks", array(                        "active" => 0                    ));                    //add these new blocks for weekday                    $success = true;                    foreach ($block_start_times as $key => $value) {                        $start_time = $block_start_times[$key];                        $end_time = $block_end_times[$key];                        if ($start_time > $end_time) {                            return array(                                "result" => "error",                                "message" => "Block start time cannot be more than block end time"                            );                        }                        //check if complete outside to daytime                        if (($start_time < $day_start_time && $end_time < $day_start_time) ||                                ($start_time > $day_end_time && $end_time > $day_end_time) ||                                ($start_time === $day_end_time || $end_time === $day_start_time)) {                            if (!empty($start_time) && !empty($end_time)) {                                //log_message("error", "weekly complete outside {$start_time} and {$end_time}");                                return array(                                    "result" => "error",                                    "message" => "Block times must be within the available "                                    . "start OR end time. Please try again"                                );                            }                        }                        //check overlapping                        foreach ($block_start_times as $key1 => $value1) {                            if ($key === $key1) {                                continue;                            }                            $start_time1 = $block_start_times[$key1];                            $end_time1 = $block_end_times[$key1];                            if (($start_time1 >= $start_time && $start_time1 < $end_time) ||                                    ($end_time1 > $start_time && $start_time1 <= $end_time)) {                                return array(                                    "result" => "error",                                    "message" => "Block times must not overlap with each other. "                                    . "Please try again"                                );                            }                        }                    }                    //process for timeslots                    $timeslots = array();                    foreach ($block_start_times as $key => $value) {                        $start_time = $block_start_times[$key];                        $end_time = $block_end_times[$key];                        if ($start_time < $day_start_time &&                                $end_time > $day_start_time && $end_time < $day_end_time) {                            $start_time = $day_start_time;                            //streach head                        }                        if ($end_time > $day_end_time &&                                $start_time > $day_start_time && $start_time < $day_end_time) {                            $end_time = $day_end_time;                            //streach tail                        }                        if ($start_time === $end_time) {                            continue;                        }                        if (!empty($start_time) && !empty($end_time)) {                            $timeslots[] = array(                                "clinic_physician_id" => $physician_id,                                "start_time" => $start_time,                                "end_time" => $end_time,                                "for_weekday" => $day                            );                        }                    }                    if (sizeof($timeslots) > 0) {                        $success = $this->db->insert_batch("clinic_physician_weekly_blocks", $timeslots);                    }                    //update start end time for weekday                    $updated = $this->db->where(array(                                "clinic_physician_id" => $physician_id,                                "active" => 1                            ))->update("schedule_visit_settings", array(                        "{$day}_start_time" => "{$day_start_time}:00",                        "{$day}_end_time" => "{$day_end_time}:00"                    ));                    if ($updated && $success) {                        $this->db->trans_complete();                        return array(                            "result" => "success"                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Physician schedule setting could not be updated"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function update_weekday_timing_all_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        $this->form_validation->set_rules('start_time', 'Start Time', 'required');        $this->form_validation->set_rules('end_time', 'End Time', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $this->db->trans_start();                    $day_start_time = $data["start_time"];                    $day_end_time = $data["end_time"];                    $block_start_times = isset($data["block_start_time"]) ?                            $data["block_start_time"] : array();                    $block_end_times = isset($data["block_end_time"]) ?                            $data["block_end_time"] : array();                    //remove exisiting blocks for all weekdays                     $this->db->where(array(                        "clinic_physician_id" => $physician_id,                        "active" => 1                    ))->update("clinic_physician_weekly_blocks", array(                        "active" => 0                    ));                    //remove all day blocks                     $this->db->where(array(                        "clinic_physician_id" => $physician_id,                        "active" => 1                    ))->update("clinic_physician_day_blocks", array(                        "active" => 0                    ));                    $updated = $this->db->where(array(                                "clinic_physician_id" => $physician_id,                                "active" => 1                            ))->update("schedule_visit_settings", array(                        "mon_start_time" => $day_start_time,                        "mon_end_time" => $day_end_time,                        "tue_start_time" => $day_start_time,                        "tue_end_time" => $day_end_time,                        "wed_start_time" => $day_start_time,                        "wed_end_time" => $day_end_time,                        "thu_start_time" => $day_start_time,                        "thu_end_time" => $day_end_time,                        "fri_start_time" => $day_start_time,                        "fri_end_time" => $day_end_time,                        "sat_start_time" => $day_start_time,                        "sat_end_time" => $day_end_time,                        "sun_start_time" => $day_start_time,                        "sun_end_time" => $day_end_time,                    ));                    $success = true;                    foreach ($block_start_times as $key => $value) {                        $start_time = $block_start_times[$key];                        $end_time = $block_end_times[$key];                        if ($start_time > $end_time) {                            return array(                                "result" => "error",                                "message" => "Block start time cannot be more than block end time"                            );                        }                        //check if complete outside to daytime                        if (($start_time < $day_start_time && $end_time < $day_start_time) ||                                ($start_time > $day_end_time && $end_time > $day_end_time) ||                                ($start_time === $day_end_time || $end_time === $day_start_time)) {                            if (!empty($start_time) && !empty($end_time)) {                                //log_message("error", "weekly complete outside {$start_time} and {$end_time}");                                return array(                                    "result" => "error",                                    "message" => "Block times must be within the available "                                    . "start OR end time. Please try again"                                );                            }                        }                        //check overlapping                        foreach ($block_start_times as $key1 => $value1) {                            if ($key === $key1) {                                continue;                            }                            $start_time1 = $block_start_times[$key1];                            $end_time1 = $block_end_times[$key1];                            if (($start_time1 >= $start_time && $start_time1 < $end_time) ||                                    ($end_time1 > $start_time && $start_time1 <= $end_time)) {                                return array(                                    "result" => "error",                                    "message" => "Block times must not overlap with each other. "                                    . "Please try again"                                );                            }                        }                    }                    //process for timeslots                    $timeslots = array();                    $weekdays = array("mon", "tue", "wed", "thu", "fri", "sat", "sun");                    foreach ($block_start_times as $key => $value) {                        $start_time = $block_start_times[$key];                        $end_time = $block_end_times[$key];                        if ($start_time < $day_start_time &&                                $end_time > $day_start_time && $end_time < $day_end_time) {                            $start_time = $day_start_time;                            //streach head                        }                        if ($end_time > $day_end_time &&                                $start_time > $day_start_time && $start_time < $day_end_time) {                            $end_time = $day_end_time;                            //streach tail                        }                        if ($start_time === $end_time) {                            continue;                        }                        if (!empty($start_time) && !empty($end_time)) {                            //insert for all                            foreach ($weekdays as $key => $day) {                                $timeslots[] = array(                                    "clinic_physician_id" => $physician_id,                                    "start_time" => $start_time,                                    "end_time" => $end_time,                                    "for_weekday" => $day                                );                            }                        }                    }                    if (sizeof($timeslots) > 0) {                        $success = $this->db->insert_batch("clinic_physician_weekly_blocks", $timeslots);                    }                    if ($updated && $success) {                        $this->db->trans_complete();                        return array(                            "result" => "success"                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Physician schedule setting could not be updated"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function get_all_weekday_timing_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $physician_data = $this->db->select(                                            "mon, tue, wed, thu, fri, sat, sun, "                                            . "mon_start_time, mon_end_time, "                                            . "tue_start_time, tue_end_time, "                                            . "wed_start_time, wed_end_time, "                                            . "thu_start_time, thu_end_time, "                                            . "fri_start_time, fri_end_time, "                                            . "sat_start_time, sat_end_time, "                                            . "sun_start_time, sun_end_time")                                    ->from("schedule_visit_settings")                                    ->where(array(                                        "clinic_physician_id" => $physician_id,                                        "active" => 1                                    ))->get()->result();                    if ($physician_data) {                        return array(                            "result" => "success",                            "data" => $physician_data                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Schedule settings data not found"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    public function set_day_specific_blocking_model() {        $this->form_validation->set_rules('id', 'Physician ID', 'required');        $this->form_validation->set_rules('type', 'Block Type', 'required');        $this->form_validation->set_rules('blocking_date', 'Blocking Date', 'required');        $this->form_validation->set_rules('day_start_time', 'Start Date', 'required');        $this->form_validation->set_rules('day_end_time', 'End Date', 'required');        if ($this->form_validation->run()) {            try {                $data = $this->input->post();                $physician_id = get_decrypted_id($data["id"], "clinic_physician_info");                $physician_auth = is_physician_under_current_clinic($physician_id);                if ($physician_auth) {                    $this->db->trans_start();                    $blocking_date = $data["blocking_date"];                    $success = true;                    //change start time, end time for day if it is changed                    $day_start_time = $data["day_start_time"];                    $day_end_time = $data["day_end_time"];                    //check if already exist, then                     $modified_datetime = $this->db->select("id")                                    ->from("clinic_physician_day_blocks")                                    ->where(array(                                        "active" => 1,                                        "for_date" => $blocking_date,                                        "clinic_physician_id" => $physician_id,                                        "type" => "daytime"                                    ))->get()->result();                    //log_message("error", "select modified time straight = " . $this->db->last_query());                    $tmp_weekday = DateTime::createFromFormat("Y-m-d", $blocking_date);                    $weekday = substr(strtolower($tmp_weekday->format("l")), 0, 3);                    if ($modified_datetime) {                        //just replace it with updated or not updated start end time                        $this->db->where(array(                            "id" => $modified_datetime[0]->id                        ))->update("clinic_physician_day_blocks", array(                            "start_time" => $day_start_time,                            "end_time" => $day_end_time,                            "active" => 1                        ));                        //log_message("error", "updated modified time straight = " . $this->db->last_query());                    } else {                        //log_message("error", "inserting new daytime");                        //insert a timing for day                        $this->db->insert("clinic_physician_day_blocks", array(                            "for_date" => $blocking_date,                            "clinic_physician_id" => $physician_id,                            "type" => "daytime",                            "start_time" => $day_start_time,                            "end_time" => $day_end_time                        ));                    }                    //disable existing blocks for that day                    if ($data["type"] === "timeblock") {                        //log_message("error", "remove dayblock as well timeblock if any for this date");                        //remove dayblock as well timeblock if any for this date                        $this->db->where(array(                                    "active" => 1,                                    "for_date" => $blocking_date,                                    "clinic_physician_id" => $physician_id                                ))                                ->where_in("type", array("dayblock", "timeblock"));                        $this->db->update("clinic_physician_day_blocks", array(                            "active" => 0                        ));                        //insert as new blocks for that day                        $start_times = (isset($data["start_time"]) ? $data["start_time"] : array());                        $end_times = (isset($data["end_time"]) ? $data["end_time"] : array());                        if (sizeof($start_times) > 0) {                            //log_message("error", "size of start data is > 0");                            //return falsy data first                            foreach ($start_times as $key => $value) {                                //log_message("error", "for each of blocks");                                $start_time = $start_times[$key];                                $end_time = $end_times[$key];                                if ($start_time > $end_time) {                                    return array(                                        "result" => "error",                                        "message" => "Block start time cannot be more than block end time"                                    );                                }                                //check if complete outside to daytime                                if (($start_time < $day_start_time && $end_time < $day_start_time) ||                                        ($start_time > $day_end_time && $end_time > $day_end_time) ||                                        ($start_time === $day_end_time || $end_time === $day_start_time)) {                                    return array(                                        "result" => "error",                                        "message" => "Block times must be within the available "                                        . "start OR end time. Please try again"                                    );                                }                                //check overlapping                                foreach ($start_times as $key1 => $value1) {                                    if ($key === $key1) {                                        continue;                                    }                                    $start_time1 = $start_times[$key1];                                    $end_time1 = $end_times[$key1];                                    if (($start_time1 >= $start_time && $start_time1 < $end_time) ||                                            ($end_time1 > $start_time && $start_time1 <= $end_time)) {                                        return array(                                            "result" => "error",                                            "message" => "Block times must not overlap with each other. "                                            . "Please try again"                                        );                                    }                                }                            }                            //insert the blocks for day                            if (sizeof($start_times) > 0) {                                //log_message("error", "size of starts > 0");                                $insert_timeslots = array();                                foreach ($start_times as $key => $value) {                                    //log_message("error", "for each blocks");                                    //get times in proper format                                    $start_time = $start_times[$key] . ":00";                                    $end_time = $end_times[$key] . ":00";                                                                        if($start_time < $day_start_time) {                                        $start_time = $day_start_time;                                    }                                    if($end_time > $day_end_time) {                                        $end_time = $day_end_time;                                    }                                    $insert_timeslots[] = array(                                        "clinic_physician_id" => $physician_id,                                        "type" => "timeblock",                                        "start_time" => $start_time,                                        "end_time" => $end_time,                                        "for_date" => $blocking_date                                    );                                }                                //log_message("error", "inserting success = " . json_encode($insert_timeslots));                                $success = $this->db->insert_batch("clinic_physician_day_blocks", $insert_timeslots);                            }                        }                    } else if ($data["type"] === "dayblock") {                        //log_message("error", "remove timeblock if any for this");                        //remove timeblock if any for this                        $this->db->where(array(                                    "active" => 1,                                    "for_date" => $blocking_date,                                    "clinic_physician_id" => $physician_id                                ))                                ->where_in("type", array("timeblock", "daytime", "dayblock"))                                ->update("clinic_physician_day_blocks", array(                                    "active" => 0                        ));                        $success = $this->db->insert("clinic_physician_day_blocks", array(                            "clinic_physician_id" => $physician_id,                            "type" => "dayblock",                            "for_date" => $blocking_date                        ));                        //log_message("error", "insert dayblock = " . $this->db->last_query());                    }                    //                    if ($success) {                        $this->db->trans_complete();                        return array(                            "result" => "success"                        );                    } else {                        return array(                            "result" => "error",                            "message" => "Failed to add this blocking time slot"                        );                    }                } else {                    return array(                        "result" => "error",                        "message" => "Physician does not belong to this clinic"                    );                }            } catch (Exception $ex) {                return array(                    "result" => "error",                    "message" => "Internal server error"                );            }        } else {            return array(                "result" => "error",                "message" => validation_errors()            );        }    }    private function weekblock_filter_insert($weekly_blocks, $start_time, $end_time, $physician_id, $blocking_date) {        $timeslot_parts = array();        if (sizeof($weekly_blocks) !== 0) {            $insert_slot = true;            $start_time2 = null;            $end_time2 = null;            $two_parts = false;            foreach ($weekly_blocks as $weekly_key => $block) {                //log_message("error", "compare $start_time with " .                        //$block->start_time);                if ($start_time < $block->start_time &&                        $end_time > $block->end_time) {                    //if timeblock is giant and contains weekly block full                    //log_message("error", "create two blocks for giant block");                    $start_time = $start_time;                    $end_time = $block->start_time;                    $start_time2 = $block->end_time;                    $end_time2 = $end_time;                    $two_parts = true;                } else if ($start_time < $block->start_time &&                        $end_time >= $block->start_time &&                        $end_time <= $block->end_time) {                    //if timeblock s is less than wb_s and                     //timeblock e is b/w wb_s and wb_e                    //log_message("error", "create one for left block");                    $start_time = $start_time;                    $end_time = $block->start_time;                } else if ($end_time > $block->end_time &&                        $start_time >= $block->start_time &&                        $start_time < $block->end_time) {                    //if timeblock e is greater than wb_e and                     //timeblock s is b/w wb_s and wb_e                    //log_message("error", "create one for right block");                    $start_time = $block->end_time;                    $end_time = $end_time;                } else {                    //log_message("error", "SKIPPED ALL");                }                if ($start_time === $block->start_time && $end_time === $block->end_time) {                    //log_message("error", "MATCHED NOW, BREAK FOR");                    $insert_slot = false;                    break;                }            }        } else {            //log_message("error", "going straight insert");        }        if ($start_time === $end_time) {            //log_message("error", "FOUND SAME AT END");            $insert_slot = false;        }        if ($insert_slot) {            $timeslot_parts[] = array(                "start_time" => $start_time,                "end_time" => $end_time            );            //log_message("error", "timeslots to be inserted = " .                   // json_encode($timeslot_parts));            if ($two_parts) {                $timeslot_parts[] = array(                    "start_time" => $start_time2,                    "end_time" => $end_time2                );                foreach ($timeslot_parts as $key => $timeslot) {                    //log_message("error", "will send more than 1 call for " . $timeslot["start_time"] . ", " .                            //$timeslot["end_time"]);                    //                $this->weekblock_filter_insert($weekly_blocks, $timeslot->start_time, $timeslot->end_time, $physician_id, $blocking_date);                }            } else {                $insert_timeslots = array(                    "clinic_physician_id" => $physician_id,                    "type" => "timeblock",                    "start_time" => $timeslot_parts[0]["start_time"],                    "end_time" => $timeslot_parts[0]["end_time"],                    "for_date" => $blocking_date                );                //log_message("error", "going to insert the magic filtered = " . json_encode($insert_timeslots));                $this->db->insert("clinic_physician_day_blocks", $insert_timeslots);            }        }    }}